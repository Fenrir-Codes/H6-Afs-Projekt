<!-- Lavet af Jozsef -->
@using ElevPortalen.Models;﻿
@using ElevPortalen.Pages.AlertBox
@using ElevPortalen.Services;

@inject AuthenticationStateProvider AuthenticationStateProvider

<!--container of the update page-->
<div class="col-xl-12 col-md-12 col-sm-12">
        <!--Header of the update page-->
        <div class="card-header d-flex justify-content-center pt-3" style="background-color:black; color:white; height:55px;">
        Send Besked til @MessageTo
        </div>

        <!--body of the update page-->
        <div class="card-body p-4">
        <input type="hidden" @bind="Model.ReceiverId">
            <div class="mb-3">
                <label for="_senderName" class="form-label">E-mail</label>
                <input type="text" class="form-control" id="_senderName" placeholder="name@example.com" @bind="Model.SenderName">
            </div>
            <div class="mb-3">
                <label for="_subject" class="form-label">Subject</label>
                <input type="text" class="form-control" id="_subject" placeholder="Subject" @bind="Model.Subject">
            </div>
            <div class="mb-3">
                <label for="_message" class="form-label">Besked</label>
                <textarea class="form-control" id="_message" rows="8" @bind="Model.Content"></textarea>
            </div>
        </div>

</div>

@code {
    [Parameter]
    public MessageModel? Model { get; set; }
    [Parameter]
    public int ReceiverId { get; set; }
    [Parameter]
    public int SenderId { get; set; }
    [Parameter]
    public int sendersReceiverId { get; set; }
    [Parameter]
    public string? MessageTo { get; set; }

    private AuthenticationState? _authState;
    private string? nameOFSender { get; set; }

    protected override void OnInitialized()
    {
        SetValues();
    }

    #region Setting the ID of the sender, the date and the senderName
    private async void SetValues()
    {
        await GetAuthenticatedUsersName();

        // Set values automatically
        Model.ReceiverId = ReceiverId;
        Model.SenderId = SenderId;
        Model.theSendersReceiverId = sendersReceiverId;
        Model.SenderName = nameOFSender;
        Model.Timestamp = DateTime.Now;
    }
    #endregion

    #region Get the authenticated user name
    private async Task GetAuthenticatedUsersName()
    {
        _authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (_authState != null)
        {
            nameOFSender = _authState.User.Identity.Name;
        }
    }
    #endregion

}
