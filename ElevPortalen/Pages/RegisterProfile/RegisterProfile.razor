@page "/registerprofile"

@*Lavet af Jozsef*@
@using ElevPortalen.Models
@using ElevPortalen.Services
@using ElevPortalen.Data;
@using System.Text.Json
@using System.Threading

@inject DawaService dawaService
@inject ElevPortalenDataDbContext _context
@inject CompanyService _companyService
@inject StudentService _studentService
@inject SkillService _skillService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IConfiguration Configuration
@inject NavigationManager NavManager

<PageTitle>Register</PageTitle>

<div class="container">

    <AuthorizeView Roles="Student">

        <Authorized>
            <div class="container d-flex align-content-center justify-content-center">
                <div class="col-xl-12">
                    <br />
                    <!-- Account details card-->
                    <div class="card mb-4">
                        <div class="card-header fw-bold">Registrer Kontooplysninger</div>
                        <div class="card-body">
                            <form>
                                <div class="col-md-6">
                                    <label class="small mb-1 fw-bold" for="title">Title</label>
                                    <input class="form-control" id="title" type="text"
                                           placeholder="Skriv Din titel" @bind="_studentData.Title">
                                </div>
                                <!-- Form Row-->
                                <div class="row gx-3 mb-3">
                                    <!-- Form Group (Name)-->
                                    <div class="col-md-6">
                                        <label class="small mb-1 fw-bold" for="firstname">Fornavn</label>
                                        <input class="form-control" id="firstname" type="text"
                                               placeholder="Fornavn" @bind="_studentData.FirstName">
                                    </div>
                                    <div class="col-md-6">
                                        <label class="small mb-1 fw-bold" for="middlename">Mellemnavn</label>
                                        <input class="form-control" id="middlename" type="text"
                                               placeholder="Mellemnavn (hvis du har)" @bind="_studentData.MiddleName">
                                    </div>
                                    <div class="col-md-6">
                                        <label class="small mb-1 fw-bold" for="flastname">Efternavn</label>
                                        <input class="form-control" id="lastname" type="text"
                                               placeholder="Efternavn" @bind="_studentData.LastName">
                                    </div>
                                    <!--Email-->
                                    <div class="col-md-6">
                                        <label class="small mb-1 fw-bold" for="Email">Email</label>
                                        <input class="form-control" id="Email" type="email"
                                               placeholder="example@example.com" @bind="_studentData.Email">
                                    </div>
                                    <!-- Form Group (address)-->
                                    <div class="col-md-6">
                                        <label class="small mb-1 fw-bold" for="inputaddress">Addresse</label>
                                        <input class="form-control" list="addressSuggestions" @bind="_studentData.Address" placeholder="Enter address" @oninput="UpdateDropdownWithDelay">
                                        <datalist id="addressSuggestions">
                                            @foreach (var item in address)
                                            {
                                                <!-- Option for each address suggestion -->
                                                <option value="@item.adresse.adresseringsvejnavn @item.adresse.husnr @item.adresse.etage @item.adresse.dør @item.adresse.postnr @item.adresse.postnrnavn">
                                                    <!-- Display street name and house number for each address suggestion -->
                                                    @item.adresse.adresseringsvejnavn @item.adresse.husnr @item.adresse.etage @item.adresse.dør @item.adresse.postnr @item.adresse.postnrnavn
                                                </option>
                                            }
                                        </datalist>
                                    </div>
                                    <!--Phone-->
                                    <div class="mb-3 col-md-6">
                                        <label class="small mb-1 fw-bold" for="inputPhone">Mobil</label>
                                        <input class="form-control" type="tel" id="inputPhone" name="phone"
                                               placeholder="12 34 56 78" @bind="_studentData.PhoneNumber" required>
                                    </div>
                                </div>
                                <!-- Form Row -->
                                <div class="row gx-3 mb-3">
                                    <div class="col-md-6">
                                        <label class="small mb-1 fw-bold" for="_speciality">Specialisering</label>
                                        <select class="form-select form-select-md" @bind="_studentData.Speciality" id="_speciality" aria-label="Region" required>
                                            <option value="" disabled selected>Vælg dit speciale</option>
                                            <option value="It-Support">It-Supporter</option>
                                            <option value="Infrastrukture">Infrastruktur</option>
                                            <option value="Programmering">Programmering</option>
                                        </select>
                                    </div>
                                </div>
                                <div class="row">
                                    <label class="mb-1 form-label fw-bold" for="_Skills">Færdigheder</label>
                                    <div class="col-md-3 mb-2">
                                        <label class="mb-1 small form-label fw-bold" for="_Skills">Programmeringssprog</label>

                                        <div class="row">
                                            <label>
                                                <input type="checkbox" @bind="_Skills.CSharp" /> C#
                                            </label>
                                            <label>
                                                <input type="checkbox" @bind="_Skills.Java" /> Java
                                            </label>
                                            <label>
                                                <input type="checkbox" @bind="_Skills.DotNet" /> .Net
                                            </label>
                                            <label>
                                                <input type="checkbox" @bind="_Skills.Typescript" /> TypeScript
                                            </label>
                                            <label>
                                                <input type="checkbox" @bind="_Skills.Python" /> Python
                                            </label>
                                        </div>
                                    </div>
                                    <div class="col-md-3 mb-2">
                                        <div class="row">
                                            <label class="mt-4">
                                                <input type="checkbox" @bind="_Skills.PHP" /> PHP
                                            </label>
                                            <label>
                                                <input type="checkbox" @bind="_Skills.CPlusPlus" /> C++
                                            </label>
                                            <label>
                                                <input type="checkbox" @bind="_Skills.C" /> C
                                            </label>
                                            <label>
                                                <input type="checkbox" @bind="_Skills.Blazor" /> Blazor
                                            </label>
                                            <label>
                                                <input type="checkbox" @bind="_Skills.JavaScript" /> JavaScript
                                            </label>
                                        </div>
                                    </div>
                                    <div class="col-md-3 mb-3">
                                        <label class="mb-1 small form-label fw-bold" for="_Skills">Web-udvikling</label>

                                        <div class="row">
                                            <label>
                                                <input type="checkbox" @bind="_Skills.Bootstrap" /> Bootstrap
                                            </label>

                                            <label>
                                                <input type="checkbox" @bind="_Skills.HTML" /> Html
                                            </label>
                                            <label>
                                                <input type="checkbox" @bind="_Skills.CSS" /> CSS
                                            </label>
                                            <label>
                                                <input type="checkbox" @bind="_Skills.SQL" /> SQL
                                            </label>
                                            <label>
                                                <input type="checkbox" @bind="_Skills.NetWork" /> Network
                                            </label>
                                        </div>
                                    </div>
                                    <div class="col-md-3 mb-2">
                                        <label class="mb-1 small form-label fw-bold" for="_Skills">Andet</label>

                                        <div class="row">
                                            <label>
                                                <input type="checkbox" @bind="_Skills.OfficePack" /> Office pakken
                                            </label>
                                            <label>
                                                <input type="checkbox" @bind="_Skills.CloudComputing" /> Cloud technologies
                                            </label>
                                            <label>
                                                <input type="checkbox" @bind="_Skills.VersionControl" /> Git / GitHub
                                            </label>
                                            <label>
                                                <input type="checkbox" @bind="_Skills.Communikation" /> Kommunikation
                                            </label>
                                             <label>
                                                <input type="checkbox" @bind="_Skills.ProblemSolving" /> Problemsolving
                                            </label>
                                            <label>
                                                <input type="checkbox" @bind="_Skills.TeamWorking" /> Team work
                                            </label>
                                        </div>
                                    </div>
                                </div>

                                <!-- Form Group (Description)-->
                                <div class="col-md-12 mb-3">
                                    <label for="Description" class="form-label">Beskrivelse</label>
                                    <textarea class="form-control" @bind="_studentData.Description" id="_description" rows="4"></textarea>
                                </div>

                                <InputFile OnChange="@LoadFiles" class="form-control" multiple accept=".png,.jpg,.jpeg" />
                            </form>

                            <button class="btn btn-outline-success mt-2" @onclick="CreateStudentProfile">Gem</button>

                        </div>
                    </div>
                </div>
            </div>
        </Authorized>

    </AuthorizeView>

    <AuthorizeView Roles="Company">

        <Authorized>
            <div class="container d-flex align-content-center justify-content-center">
                <div class="col-xl-12">
                    <br />
                    <!-- Account details card-->
                    <div class="card mb-4">
                        <div class="card-header">Registrer Kontooplysninger For Dit Firma</div>
                        <div class="card-body">
                            <form>
                                <!-- Form Row-->
                                <div class="row gx-3 mb-3">
                                    <!-- Form Group (Company Name)-->
                                    <div class="col-md-6">
                                        <label class="small mb-1 fw-bold" for="companyname">Firmanavn</label>
                                        <input class="form-control" id="companyname" type="text"
                                               placeholder="Firmanavn" @bind="_companyData.CompanyName">
                                    </div>
                                    <!-- Form Group (company address)-->
                                    <div class="col-md-6">
                                        <label class="small mb-1 fw-bold" for="inputaddress">Addresse</label>
                                        <input class="form-control" list="addressSuggestions" @bind="_companyData.CompanyAddress" placeholder="Enter address" @oninput="UpdateDropdownWithDelay">
                                        <datalist id="addressSuggestions">
                                            @foreach (var item in address)
                                            {
                                                <!-- Option for each address suggestion -->
                                                <option value="@item.adresse.adresseringsvejnavn @item.adresse.husnr @item.adresse.etage @item.adresse.dør @item.adresse.postnr @item.adresse.postnrnavn">
                                                    <!-- Display street name and house number for each address suggestion -->
                                                    @item.adresse.adresseringsvejnavn @item.adresse.husnr @item.adresse.etage @item.adresse.dør @item.adresse.postnr @item.adresse.postnrnavn
                                                </option>
                                            }
                                        </datalist>
                                    </div>
                                </div>
                                <!-- Form Row        -->
                                <div class="row gx-3 mb-3">
                                    <!-- Form Group (Region)-->
                                    <div class="mb-3 col-md-6">
                                        <label class="small mb-1 fw-bold" for="_region">Din Region</label>
                                        <select class="form-select form-select-md" @bind="_companyData.Region" id="_region" aria-label="Region">
                                            <option disabled selected></option>
                                            <option value="Region Nordjylland">Region Nordjylland</option>
                                            <option value="Region Midtjylland">Region Midtjylland</option>
                                            <option value="Region Syddanmark">Region Syddanmark</option>
                                            <option value="Region Hovedstaden">Region Hovedstaden</option>
                                            <option value="Region Sjælland">Region Sjælland</option>
                                        </select>
                                    </div>
                                    <!-- Form Group (Email)-->
                                    <div class="col-md-6">
                                        <label class="small mb-1 fw-bold" for="inputEmail">E-Mail Addresse</label>
                                        <input class="form-control" id="inputEmail" type="text"
                                               placeholder="Firma E-mail" @bind="_companyData.Email">
                                    </div>
                                    <div class="mb-3 col-md-6">
                                        <label class="small mb-1 fw-bold" for="inputPhone">Phone Number</label>
                                        <input class="form-control" type="tel" id="inputPhone" name="phone"
                                               placeholder="8 cifre" @bind="_companyData.PhoneNumber">
                                    </div>
                                    <!-- webLink -->
                                    <div class="mb-3 col-md-6">
                                        <label class="small mb-1 fw-bold" for="inputWebsite">Firma link</label>
                                        <input class="form-control" id="inputWebsite" type="text"
                                               placeholder="Indtast Webstedslink" @bind="_companyData.Link">
                                    </div>
                                </div>
                                <!-- Form Row-->
                                <div class="row gx-3 mb-3">
                                    <!-- Form Group (preferencesr)-->
                                    <div class="col-md-6">
                                        <label class="small mb-1 fw-bold" for="_preferences">Preference</label>
                                        <select class="form-select form-select-md" @bind="_companyData.Preferences" id="_preferences"
                                                aria-label="Preferences">
                                            <option value="" disabled selected></option>
                                            <option value="It-Supporter">It-Supporter</option>
                                            <option value="Infrastructure">Infrastruktur</option>
                                            <option value="Programmer">Programmør</option>
                                        </select>
                                    </div>
                                </div>
                                <!-- Form Group (Description)-->
                                <div class="col-md-12 mb-3">
                                    <label for="Description" class="form-label fw-bold">Beskrivelse</label>
                                    <textarea class="form-control" @bind="_companyData.Description" id="_description" rows="4"></textarea>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" @bind="_companyData.IsHiring">
                                    <label class="form-check-label">
                                        Hiring Now
                                    </label>
                                </div>
                                <div class="form-check mb-3">
                                    <input class="form-check-input" type="checkbox" @bind="_companyData.IsVisible">
                                    <label class="form-check-label">
                                        Profile Visible
                                    </label>
                                </div>

                            </form>
                            
                            <button class="btn btn-outline-success mt-2" @onclick="CreateCompanyProfile">Gem</button>

                        </div>
                    </div>
                </div>
            </div>
        </Authorized>

    </AuthorizeView>

</div>

@code {
    #region fields

    private AuthenticationState? _authState;

    //Fileupload
    private string? _newFileName = "";
    private long maxFileSize = 1024 * 1024 * 1; // represents 3MB
    private int maxAllowedFiles = 1;
    private List<string> errors = new();

    //address lookup
    private string? searchTerm;
    private string? selectedAddress;
    private string Message = "";

    //models
    private SkillModel _Skills = new SkillModel();
    private StudentModel _studentData = new StudentModel();
    private CompanyModel _companyData = new CompanyModel();
    private List<AddressModel> address = new List<AddressModel>();

    //booleans
    private bool showDropdown;
    private bool isAuthenticated = false;

    private CancellationTokenSource? cancellationTokenSource;
    #endregion

    #region OnInitialize
    protected override async Task OnInitializedAsync()
    {
        // Getting the user current authentication state.
        _authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        if (_authState != null)
        {
            if (_authState.User.Identity?.IsAuthenticated == true)
            {
                isAuthenticated = true;
            }
            else
            {
                isAuthenticated = false;
            }
        }
    }
    # endregion

    #region Create Student Profile Function
    private async Task CreateStudentProfile()
    {
        try
        {
            _authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

            if (_authState != null)
            {
                var user = _authState.User;

                if (user.Identity?.IsAuthenticated == true)
                {
                    // Retrieve the user's unique identifier (ID or GUID)
                    var userIdString = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

                    // Convert the string representation to a Guid
                    if (Guid.TryParse(userIdString, out Guid userId))
                    {
                        _studentData = new StudentModel
                            {
                                UserId = userId, // Set the UserId to the user's unique identifier
                                Title = _studentData.Title,
                                FirstName = _studentData.FirstName,
                                MiddleName = _studentData.MiddleName,
                                LastName = _studentData.LastName,
                                Email = _studentData.Email,
                                Address = _studentData.Address,
                                Description = _studentData.Description,
                                profileImage = _newFileName,
                                Speciality = _studentData.Speciality,
                                PhoneNumber = _studentData.PhoneNumber,
                                RegisteredDate = DateTime.Now,
                                UpdatedDate = DateTime.Now

                            };

                        Message = await _studentService.CreateStudent(_studentData); //create student data
                        await CreateSkills(_studentData.StudentId); //add the student skills
                        NavManager.NavigateTo("/profile"); // return to profile
                    }
                    else
                    {
                        // Handle the exception and return an error message
                        Message = $"Error parsing GUID";
                    }
                }
            }

            // Default return statement if conditions are not met
            Message = $"Unexpected error occurred";
        }
        catch (Exception ex)
        {
            // Handle the exception and return an error message
            Message = $"Error: {ex.Message}";
        }
    }
    #endregion

    #region Add Skills Function
    private async Task CreateSkills(int studentId)
    {
        var result = await _skillService.CreateSkills(studentId, _Skills);
    }
    #endregion

    #region Create Company Profile Function
    private async Task CreateCompanyProfile()
    {
        try
        {
            _authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

            if (_authState != null && _authState.User != null)
            {
                var user = _authState.User;

                if (user.Identity?.IsAuthenticated == true)
                {
                    // Retrieve the user's unique identifier (ID or GUID)
                    var userIdString = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

                    // Convert the string representation to a Guid
                    if (Guid.TryParse(userIdString, out Guid userId))
                    {
                        _companyData = new CompanyModel
                        {
                                UserId = userId,
                                CompanyName = _companyData.CompanyName,
                                CompanyAddress = _companyData.CompanyAddress,
                                Region = _companyData.Region,
                                Email = _companyData.Email,
                                Link = _companyData.Link,
                                Preferences = _companyData.Preferences,
                                Description = _companyData.Description,
                                PhoneNumber = _companyData.PhoneNumber,
                                profileImage = _newFileName,
                                IsHiring = _companyData.IsHiring,
                                IsVisible = _companyData.IsVisible,
                                UpdatedDate = DateTime.Now,
                                RegisteredDate = DateTime.Now,
                        };

                        Message = await _companyService.CreateCompany(_companyData);
                        NavManager.NavigateTo("/profile");
                    }
                    else
                    {
                        // Handle the exception and return an error message
                        Message = $"Error parsing GUID";
                    }
                }
            }

            // Default return statement if conditions are not met
            Message = $"Unexpected error occurred";
        }
        catch (Exception ex)
        {
            // Handle the exception and return an error message
            Message = $"Error: {ex.Message}";
        }
    }
    #endregion

    #region Method to update address suggestions with a delay
    private async Task UpdateDropdownWithDelay(ChangeEventArgs args)
    {
        searchTerm = args.Value?.ToString();

        <!-- Cancel the previous delay if any -->
        cancellationTokenSource?.Cancel();

        <!-- Create a new cancellation token for the delay -->
        cancellationTokenSource = new CancellationTokenSource();

        try
        {
            <!-- Delay for 300 milliseconds before fetching suggestions -->
            await Task.Delay(300, cancellationTokenSource.Token);
        }
        catch (TaskCanceledException)
        {
            <!-- Delay was canceled due to a new input change -->
            return;
        }

        <!-- Fetch and update address suggestions based on the searchTerm -->
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            searchTerm = char.ToUpper(searchTerm[0]) + searchTerm.Substring(1);
            var updatedAddress = await dawaService.GetAddress(searchTerm);
            address = updatedAddress ?? new List<AddressModel>();
            showDropdown = true;
            <!-- Set showDropdown to true to display the datalist -->
        }
        else
        {
            <!-- Clear suggestions if searchTerm is empty -->
            address = new List<AddressModel>();
            showDropdown = false;
        }

        <!-- Trigger a re-render to update the UI -->
        StateHasChanged();
    }
    #endregion

    #region Picture file input
    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        errors.Clear();

        if (e.FileCount > maxAllowedFiles)
        {
            errors.Add($"Error: Attempting to upload {e.FileCount} files, but only {maxAllowedFiles} files are allowed");
            return;
        }

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                _newFileName = Path.ChangeExtension(
                Path.GetRandomFileName(),
                Path.GetExtension(file.Name));

                string path = Path.Combine(
                    Configuration.GetValue<string>("FileStorage")!,
                    "",
                    _newFileName);

                Directory.CreateDirectory(Path.Combine(
                    Configuration.GetValue<string>("FileStorage")!,
                    ""));

                await using FileStream fs = new(path, FileMode.Create);
                await file.OpenReadStream(maxFileSize).CopyToAsync(fs);
            }
            catch (Exception ex)
            {
                errors.Add($"File: {file.Name} Error: {ex.Message}");
            }
        }
    }
    #endregion
}
