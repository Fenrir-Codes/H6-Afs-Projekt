<!-- Delvis Lavet af Jozsef -->
@page "/admindashboard"

@using ElevPortalen.Areas.Identity.Pages.Account.Manage
@using ElevPortalen.Pages.DialogModal
@using ElevPortalen.Services;
@using ElevPortalen.Data;
@using ElevPortalen.Models;
@using ElevPortalen.Pages.AlertBox
@using System.Security.Cryptography;
@using System.Globalization

@inject ElevPortalenDataDbContext _context
@inject StudentService _studentService
@inject CompanyService _companyService
@inject AdminService _adminService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IConfiguration Configuration
@inject NavigationManager NavManager


<AuthorizeView Roles="Admin">
    <Authorized>
        @if (!isLoaded)
        {
           <div class="container-fluid text-center">
                <!-- Row with 4 cards -->
                <div class="row pt-2">
                    @for (int i = 0; i < 4; i++)
                    {
                        <div class="col-12 col-sm-6 col-lg-3 mb-2">
                            <!-- Skeleton for each card -->
                            <div class="skeleton-card">
                                <div class="card-body">
                                    <div class="skeleton-text"></div>
                                    <p class="card-text">
                                        <div class="skeleton-text"></div>
                                    </p>
                                    <p class="card-text">
                                        <div class="skeleton-text"></div>
                                    </p>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
        else
        {
            <!-- Container -->
            <div class="container-fluid text-center">
                <!-- Row with 4 cards -->
                <div class="row pt-2">
                    <div class="col-12 col-sm-6 col-lg-3 mb-2">
                        <div class="card bg-dark bg-gradient text-white h-100">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div class="me-3">
                                        <div class="text-white-75 small">
                                            Tilmeldte Elever:
                                        </div>
                                        <div class="text-lg fw-bold">
                                            @_studentCount
                                        </div>
                                    </div>
                                    <i class="fa-solid fa-user-check fa-2xl"></i>
                                </div>
                            </div>
                            <div class="card-footer d-flex align-items-center justify-content-between small" style="cursor:pointer;" @onclick="GetAllStudent">
                                <div>Vis</div>
                                <div><i class="fas fa-angle-right"></i></div>
                            </div>
                        </div>
                    </div>
                    <div class="col-12 col-sm-6 col-lg-3 mb-2">
                        <div class="card bg-dark bg-gradient text-white h-100">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div class="me-3">
                                        <div class="text-white-75 small">
                                            Tilmeldte Firmaer:
                                        </div>
                                        <div class="text-lg fw-bold">
                                            @_companyCount
                                        </div>
                                    </div>
                                    <i class="fa-solid fa-building-circle-check fa-2xl"></i>
                                </div>
                            </div>
                            <div class="card-footer d-flex align-items-center justify-content-between small" style="cursor:pointer" @onclick="GetAllCompany">
                                <div>Vis</div>
                                <div><i class="fas fa-angle-right"></i></div>
                            </div>
                        </div>
                    </div>
                    <!-- Third Card: Specialization Search -->
                    <div class="col-12 col-sm-6 col-lg-3 mb-2">
                        <div class="card bg-dark bg-gradient text-white h-100">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div class="me-3">
                                        <div class="text-white-75 small">
                                            Søgning på speciale
                                        </div>
                                    </div>
                                </div>
                                <select class="form-control" @bind="selectedSpecialization">
                                    <option disabled selected>Vælg speciale</option>
                                    <option value="It-Support">It-Supporter</option>
                                    <option value="Infrastrukture">Infrastruktur</option>
                                    <option value="Programmering">Programmering</option>
                                </select>
                            </div>
                            <div class="card-footer d-flex align-items-center justify-content-between small"
                                 @onclick="() => GetbySpeciality(selectedSpecialization)" style="cursor:pointer;">
                                <div>Vis Resultater</div>
                                <div><i class="fas fa-angle-right"></i></div>
                            </div>
                        </div>
                    </div>
                    <div class="col-12 col-sm-6 col-lg-3 mb-2">
                        <div class="card bg-dark bg-gradient text-white h-100">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div class="me-3">
                                        <div class="text-white-75 small">
                                            Registration
                                        </div>
                                    </div>
                                    <i class="fa-solid fa-clock fa-2xl"></i>
                                </div>
                            </div>
                            <div class="card-footer d-flex align-items-center justify-content-between small" style="cursor:pointer" @onclick="GetRegistration">
                                <div>Vis</div>
                                <div href="#"><i class="fas fa-angle-right"></i></div>
                            </div>
                        </div>
                    </div>
                </div>

                @if (isRegistrered)
                {
                    <div class="row">
                        <div class="col-12 d-flex justify-content-center">
                            @* <div class="d-flex justify-content-center align-items-center"> *@
                            <LineChart @ref="lineChart" Width="800" Class="mb-4" />
                        </div>
                    </div>
                }


                <!--More contect after the hr tag   , it can be a list of users etc...-->
                @if (_listOfStudents.Any() || _listOfConpanies.Any())
                {
                    <div class="card bg-dark bg-gradient text-white">
                        <div class="card-body">
                            <h5 class="card-title fw-bold">@_tableName</h5>

                            @if (_listOfStudents.Any())
                            {
                                isStudent = true;
                            <div class="table-responsive">
                                <table class="table table-striped table-dark text-white">
                                    <thead>
                                        <tr>
                                            <th class="tableheader" scope="col">Id</th>
                                            <th class="tableheader" scope="col">Navn</th>
                                            <th class="tableheader" scope="col">Addresse</th>
                                            <th class="tableheader" scope="col">E-mail</th>
                                            <th class="tableheader" scope="col">Telefonnummer</th>
                                            <th class="tableheader" scope="col">Specialisering</th>
                                            <th class="tableheader" scope="col">Operationer</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var student in studentsToPage())
                                        {
                                            <tr>
                                                <th scope="row">@student.StudentId</th>
                                                <td>@student.FirstName @student.MiddleName @student.LastName</td>
                                                <td>@student.Address</td>
                                                <td>@student.Email</td>
                                                <td>@student.PhoneNumber</td>
                                                <td>@student.Speciality</td>
                                                <td>
                                                    <div class="btn-group">
                                                        <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                                            Operation
                                                        </button>
                                                        <ul class="dropdown-menu">
                                                            <li><a class="dropdown-item" @onclick="() => DialogModal!.OpenStudentUpdate(student.StudentId)" style="cursor:pointer">Opdater</a></li>
                                                            <li><a class="dropdown-item" href="#" style="cursor:pointer">Fjern</a></li>
                                                        </ul>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                                </div>
                                <!-- Pagination controls -->
                                <nav aria-label="Page navigation">
                                    <ul class="pagination">
                                        @foreach (int page in Enumerable.Range(1, TotalPagesStudents))
                                        {
                                            var num = page;
                                            <li class="page-item @(page == currentPage ? "active" : "")">
                                                <button class="page-link" @onclick="() => ChangePage(page)">@num</button>
                                            </li>
                                        }
                                    </ul>
                                </nav>

                            }
                            else if (_listOfConpanies.Any())
                            {
                                isCompany = true;
                                <div class="table-responsive">
                                <table class="table table-striped table-dark text-white">
                                    <thead>
                                        <tr>
                                            <th class="tableheader" scope="col">Id</th>
                                            <th class="tableheader" scope="col">Firmanavn</th>
                                            <th class="tableheader" scope="col">Addresse</th>
                                            <th class="tableheader" scope="col">Region</th>
                                            <th class="tableheader" scope="col">E-mail</th>
                                            <th class="tableheader" scope="col">Telefonnummer</th>
                                            <th class="tableheader" scope="col">Leder efter</th>
                                            <th class="tableheader" scope="col">Ansatter nu</th>
                                            <th class="tableheader" scope="col">Synlig</th>
                                            <th class="tableheader" scope="col">Operationer</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var company in companiesToPage())
                                        {
                                            <tr>
                                                <th scope="row">@company.CompanyId</th>
                                                <td>@company.CompanyName</td>
                                                <td>@company.CompanyAddress</td>
                                                <td>@company.Region</td>
                                                <td>@company.Email</td>
                                                <td>@company.PhoneNumber</td>
                                                <td>@company.Preferences</td>
                                                <td>
                                                    @if (company.IsHiring)
                                                    {
                                                        <span>Ja</span>
                                                    }
                                                    else
                                                    {
                                                        <span>Nej</span>
                                                    }
                                                </td>
                                                <td>
                                                    @if (company.IsVisible)
                                                    {
                                                        <span>Ja</span>
                                                    }
                                                    else
                                                    {
                                                        <span>Nej</span>
                                                    }
                                                </td>
                                                <td>
                                                    <div class="btn-group">
                                                        <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                                            Operation
                                                        </button>
                                                        <ul class="dropdown-menu">
                                                            <li><a class="dropdown-item" @onclick="() => DialogModal!.OpenCompanyUpdate(company.CompanyId)" style="cursor:pointer">Opdater</a></li>
                                                            <li><a class="dropdown-item" style="cursor:pointer">Fjern</a></li>
                                                        </ul>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                                </div>
                                <!-- Pagination controls -->
                                <nav aria-label="Page navigation">
                                    <ul class="pagination">
                                        @foreach (int page in Enumerable.Range(1, TotalPagesCompanies))
                                        {
                                            var num = page;
                                            <li class="page-item @(page == currentPage ? "active" : "")">
                                                <button class="page-link" @onclick="() => ChangePage(page)">@num</button>
                                            </li>
                                        }
                                    </ul>
                                </nav>
                            }
                            else
                            {
                                _alertBox.SetMessage(true, "No data fund in database", 10000, warning: true);
                            }
                        </div>
                    </div>
                }

            </div>
        }


        <DialogModal @ref="DialogModal" OnClose="ReRenderTable"></DialogModal>
    </Authorized>

    <NotAuthorized>
        <p>You have no rights to administrative page!</p>
    </NotAuthorized>

</AuthorizeView>

<AlertBox @ref="_alertBox"></AlertBox>


@code {
    AlertBox _alertBox = new AlertBox();

    // List of studentmodel and companymodel
    private List<StudentModel> _listOfStudents = new List<StudentModel>();
    private List<CompanyModel> _listOfConpanies = new List<CompanyModel>();

    private string? selectedSpecialization;

    //Table name
    private string _tableName = "";
    //Count of the registered profiles
    int _studentCount = 0;
    int _companyCount = 0;

    //Pagination
    private const int PageSize = 15;  // Constant representing the number of items to display per page.
    private int currentPage = 1; //Current page set to 1
    private int TotalPagesStudents = 0; //Count the totalpages of studentdata
    private int TotalPagesCompanies = 0; //Count the totalpages of companydata

    private DialogModal? DialogModal { get; set; }
    private int Id { get; set; }
    private bool isStudent = false;
    private bool isCompany = false;
    private bool isLoaded = false;
    private bool isRegistrered = false;

    // Chart
    private LineChart lineChart = default!;
    private LineChartOptions lineChartOptions = default!;
    private ChartData chartData = default!;

    #region initialize
    protected override async Task OnInitializedAsync()
    {
        isLoaded = false;
        await GetCount();

    }
    #endregion

    #region sort by speciality (GetBySpeciality)
    private async Task GetbySpeciality(string spec)
    {
        _listOfStudents = await _studentService.GetStudentsBySpecialization(spec);
        if (!_listOfStudents.Any())
        {
            _alertBox.SetMessage(true, "There are no registered users with this specialty", 3000, warning: true);
        }
        else
        {
            isRegistrered = false;
        }
    }
    #endregion

    #region GetCount
    public async Task GetCount()
    {
        _studentCount = await _studentService.GetStudentCountAsync();
        _companyCount = await _companyService.GetCompaniesCountAsync();
        isLoaded = true;
    }
    #endregion

    #region Get all Student to a table
    private async Task GetAllStudent()
    {
        isStudent = true;
        isCompany = false;
        isRegistrered = false;
        _tableName = "Elever i Databasen";
        _listOfConpanies.Clear();
        _listOfStudents = await _studentService.ReadAllStudentData();
        currentPage = 1;
    }
    #endregion

    #region Get all Company to a table
    private async Task GetAllCompany()
    {
        isCompany = true;
        isStudent = false;
        isRegistrered = false;
        _tableName = "Firmaer i Databasen";
        _listOfStudents.Clear();
        _listOfConpanies = await _companyService.ReadAllCompanyData();
        currentPage = 1;
    }
    #endregion

    #region Pagination Collections and change page function
    IEnumerable<StudentModel> studentsToPage()
    {
        TotalPagesStudents = (int)Math.Ceiling((double)_listOfStudents.Count / PageSize);
        return _listOfStudents.Skip((currentPage - 1) * PageSize).Take(PageSize);
    }

    IEnumerable<CompanyModel> companiesToPage()
    {
        TotalPagesCompanies = (int)Math.Ceiling((double)_listOfConpanies.Count / PageSize);
        return _listOfConpanies.Skip((currentPage - 1) * PageSize).Take(PageSize);
    }

    // Pagination Change Page Function
    private void ChangePage(int newPage)
    {
        if (newPage >= 1 && newPage <= TotalPagesStudents)
        {
            currentPage = newPage;
        }
        else if (newPage >= 1 && newPage <= TotalPagesCompanies)
        {
            currentPage = newPage;
        }
    }
    #endregion

    #region ReRenderTable function for re-renderint the Table on chages
    private async void ReRenderTable()
    {
        if (isStudent)
        {
            await GetAllStudent();
        }
        else if (isCompany)
        {
            await GetAllCompany();
        }
        StateHasChanged();
    }
    #endregion

    #region Chart of registration time
    private async Task GetRegistration()
    {
        // Fetch data for students and companies
        var studentRegistrationData = await _adminService.GetMonthlyRegistrationCountsStudent();
        var companyRegistrationData = await _adminService.GetMonthlyRegistrationCountsCompany();

        // Parse and sort labels
        var cultureInfo = new CultureInfo("da-DK");
        var labels = studentRegistrationData.Keys
            .Union(companyRegistrationData.Keys)
            .Select(dateStr => DateTime.ParseExact(dateStr, "MMMM yyyy", cultureInfo)) // Parse using Danish culture
            .OrderBy(date => date)
            .Select(date => date.ToString("MMMM yyyy", cultureInfo)) // Convert back to Danish month-year format
            .ToList();

        Console.WriteLine("Sorted Labels:");
        foreach (var label in labels)
        {
            Console.WriteLine(label);
        }

        // Convert the counts from the dictionaries into lists of doubles for the chart
        var studentData = labels.Select(label =>
            {
                var key = DateTime.ParseExact(label, "MMMM yyyy", cultureInfo).ToString("MMMM yyyy");
                return studentRegistrationData.ContainsKey(key) ? (double)studentRegistrationData[key] : 0;
            })
            .ToList();

        var companyData = labels.Select(label =>
            {
                var key = DateTime.ParseExact(label, "MMMM yyyy", cultureInfo).ToString("MMMM yyyy");
                return companyRegistrationData.ContainsKey(key) ? (double)companyRegistrationData[key] : 0;
            })
            .ToList();

        var datasets = new List<IChartDataset>();

        var datasetStudent = new LineChartDataset()
            {
                Label = "Lærlinge",
                Data = studentData,
                BackgroundColor = new List<string> { "#FF6384" },
                BorderColor = new List<string> { "#FF6384" },
                BorderWidth = new List<double> { 2 },
                HoverBorderWidth = new List<double> { 4 },
                PointBackgroundColor = new List<string> { "#FF6384" },
                PointRadius = new List<int> { 3 },
                PointHoverRadius = new List<int> { 4 },
                Datalabels = new() { Align = "end", Anchor = "end" }
            };
        datasets.Add(datasetStudent);

        var datasetsCompany = new LineChartDataset()
            {
                Label = "Firmaer",
                Data = companyData,
                BackgroundColor = new List<string> { "#36A2EB" },
                BorderColor = new List<string> { "#36A2EB" },
                BorderWidth = new List<double> { 2 },
                HoverBorderWidth = new List<double> { 4 },
                PointBackgroundColor = new List<string> { "#36A2EB" },
                PointRadius = new List<int> { 3 },
                PointHoverRadius = new List<int> { 4 },
                Datalabels = new() { Align = "end", Anchor = "end" }
            };
        datasets.Add(datasetsCompany);

        chartData = new ChartData
            {
                Labels = labels,
                Datasets = datasets
            };

        lineChartOptions = new();
        lineChartOptions.Responsive = true;
        lineChartOptions.Interaction = new Interaction { Mode = InteractionMode.Index };

        lineChartOptions.Scales.X!.Title!.Text = "Måneder";
        lineChartOptions.Scales.X.Title.Display = true;

        lineChartOptions.Scales.Y!.Title!.Text = "Registrerede";
        lineChartOptions.Scales.Y.Title.Display = true;


        lineChartOptions.Plugins.Title!.Text = "Månedlige Registrationer";
        lineChartOptions.Plugins.Title.Display = true;

        isLoaded = true;
        isRegistrered = true;
        isCompany = false;
        isStudent = false;
        _listOfStudents.Clear();
        _listOfConpanies.Clear();
        await InvokeAsync(StateHasChanged);

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (isRegistrered)
        {
            await lineChart.InitializeAsync(chartData, lineChartOptions);
        }
        await base.OnAfterRenderAsync(firstRender);
    }
    #endregion

}
