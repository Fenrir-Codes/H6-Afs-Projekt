@page "/"
@*Lavet af Jozsef*@

@using ElevPortalen.Pages.AlertBox
@using ElevPortalen.Pages.Home.HomeDefault
@using ElevPortalen.Pages.Home.HomeForAdmin
@using ElevPortalen.Pages.Home.HomeForCompanies
@using ElevPortalen.Pages.Home.HomeForStudents

@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Home</PageTitle>

@* HHTMl and its logic*@
<div class="container-fluid text-center">
    <!-- Authorized Student and Company-->
    <AuthorizeView Roles="Student, Company, Admin">
        <Authorized>
            @if (context.User.IsInRole(Student))
            {
                //Listing the available companies for students
                <HomeForStudents></HomeForStudents>
            }
            else if (context.User.IsInRole(Company))
            {
                //Listing the available students for companies
                <HomeForCompanies></HomeForCompanies>
            }
            else if (context.User.IsInRole(Admin))
            {
                //Render admin index page
                <HomeForAdmin></HomeForAdmin>
            }
            else
            {
                // If components can not be rendered for some reason, show the alerbox with the message.
                <AlertBox IsVisible=true isDanger=true Message="An error occurred in rendering one of the components on the Index Page." waitForSeconds="0"></AlertBox>
            }
        </Authorized>

        <NotAuthorized>
            <!-- Rendering the default home page with the logo and login, register buttons.-->
            <HomeDefault></HomeDefault>
        </NotAuthorized>

    </AuthorizeView>

</div>

@code {

    #region Initializing objects and variables

    // private fields within the scope of the class
    private AuthenticationState? _authState;
    // Strings
    private readonly string Company = "Company";
    private readonly string Student = "Student";
    private readonly string Admin = "Admin";

    #endregion

    #region OnInitialize
    protected override async Task OnInitializedAsync()
    {
        await Authorize();
    }
    #endregion

    #region Authenticate and read the data
    private async Task Authorize()
    {
        // Getting the user current authentication state.
        _authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    }
    #endregion

}
