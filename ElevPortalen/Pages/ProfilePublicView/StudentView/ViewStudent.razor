<!-- Lavet af Jozsef -->
@page "/viewstudent"

@using ElevPortalen.Pages.AlertBox
@using ElevPortalen.Data;
@using ElevPortalen.Services;
@using ElevPortalen.Models;
@using ElevPortalen.Pages.DialogModal;
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims

@inject StudentService _studentService
@inject CompanyService _companyService
@inject SkillService _skillService
@inject MessageService _messageService
@inject IJSRuntime jsRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (isVisible)
{
    @foreach (var data in _student)
    {
        <!--Social links container-->
        <div class="row mt-4">
            <div class="col-lg-12">
                <div class="card mb-2">
                    <div class="card-body shadow-sm">
                        <div class="row">
                            <div class="col-lg-12">
                                <div class="d-flex align-items-center">
                                    <p class="text-center m-0 fw-bold me-2">Sociale links:</p>
                                    @if (!string.IsNullOrEmpty(data.FacebookLink))
                                    {
                                        <a @onclick="() => NavigateToNewTab(data.FacebookLink)" class="mx-lg-2 mx-sm-1" style="color: black; cursor:pointer">
                                            <span class="fa-stack fa-sm">
                                                <i class="fas fa-circle fa-stack-2x"></i>
                                                <i class="fab fa-facebook fa-stack-1x fa-inverse"></i>
                                            </span>
                                        </a>
                                    }
                                    else if (!string.IsNullOrEmpty(data.InstagramLink))
                                    {
                                        <a @onclick="() => NavigateToNewTab(data.InstagramLink)" class="mx-lg-2 mx-sm-1" style="color: black; cursor:pointer">
                                            <span class="fa-stack fa-sm">
                                                <i class="fas fa-circle fa-stack-2x"></i>
                                                <i class="fab fa-instagram fa-stack-1x fa-inverse"></i>
                                            </span>
                                        </a>
                                    }
                                    else if (!string.IsNullOrEmpty(data.LinkedInLink))
                                    {
                                        <a @onclick="() => NavigateToNewTab(data.LinkedInLink)" class="mx-lg-2 mx-sm-1" style="color: black; cursor:pointer">
                                            <span class="fa-stack fa-sm">
                                                <i class="fas fa-circle fa-stack-2x"></i>
                                                <i class="fab fa-linkedin fa-stack-1x fa-inverse"></i>
                                            </span>
                                        </a>
                                    }
                                    else if (!string.IsNullOrEmpty(data.GitHubLink))
                                    {
                                        <a @onclick="() => NavigateToNewTab(data.GitHubLink)" class="mx-lg-2 mx-sm-1" style="color: black; cursor:pointer;">
                                            <span class="fa-stack fa-sm">
                                                <i class="fas fa-circle fa-stack-2x"></i>
                                                <i class="fab fa-github fa-stack-1x fa-inverse"></i>
                                            </span>
                                        </a>
                                    }
                                    else
                                    {
                                        <p class="m-0 text-center">Eleven har endnu ikke tilføjet nogen sociale links</p>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!--User profile container-->
        <div class="row">
            <div class="col-lg-4">
                <div class="card mb-2 shadow-sm">
                    <div class="card-body text-center">
                        @if (!string.IsNullOrEmpty(data.profileImage) && ImageExistOnDisk(data.profileImage))
                        {
                            <img src="images/ProfileImages/@data.profileImage" alt="avatar"
                                 class="rounded-circle img-fluid" style="width: 150px; height:150px;">
                        }
                        else
                        {
                            <img src="images/DefaultAvatar.jpg" alt="avatar"
                                 class="rounded-circle img-fluid" style="width: 150px;">
                        }
                        <h5 class="my-3">
                            @data.FirstName
                            @data.LastName
                        </h5>
                        <p class="text-muted mb-3">Specialiseret i @data.Speciality</p>
                        <div class="d-flex justify-content-center mb-3">
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-8">
                <div class="card mb-2">
                    <div class="card-body shadow-sm">
                        <div class="row">
                            <div class="col-sm-3">
                                <p class="mb-0">Title</p>
                            </div>
                            <div class="col-sm-9">
                                <p class="text-muted mb-0">@data.Title</p>
                            </div>
                        </div>
                        <hr />
                        <div class="row">

                            <div class="col-sm-3">
                                <p class="mb-0">Fulde navn</p>
                            </div>
                            <div class="col-sm-9">
                                <p class="text-muted mb-0">
                                    @data.FirstName <span> </span>
                                    @if (!string.IsNullOrEmpty(data.MiddleName))
                                    {
                                        @data.MiddleName <span> </span>
                                    }
                                    @data.LastName
                                </p>
                            </div>
                        </div>
                        <hr>
                        <div class="row">
                            <div class="col-sm-3">
                                <p class="mb-0">Mobile</p>
                            </div>
                            <div class="col-sm-9">
                                <p class="text-muted mb-0">@data.PhoneNumber</p>
                            </div>
                        </div>
                        <hr>
                        <div class="row">
                            <div class="col-sm-3">
                                <p class="mb-0">Adresse</p>
                            </div>
                            <div class="col-sm-9">
                                <p class="text-muted mb-0">@data.Address</p>
                            </div>
                        </div>
                        <hr>
                        <div class="row">
                            <div class="col-sm-3">
                                <p class="mb-0">Kontakt</p>
                            </div>
                            <div class="col-sm-9">
                                <button class="btn btn-success mb-0 btn-sm" @onclick="() =>
                                 DialogModal!.OpenMessageDialog(data.StudentId, senderId, data.FirstName, data.LastName)">
                                    Send besked
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!--Description-->
        @if (!string.IsNullOrEmpty(data.Description))
        {
            <div class="row">
                <div class="col-lg-12">
                    @*   <p class="mb-2 fw-bold">Beskrivelse</p> *@
                    <div class="card mb-2">
                        <div class="card-body shadow-sm">
                            <p class="m-1">@data.Description</p>
                        </div>
                    </div>
                </div>
            </div>
        }

        <!-- Skills section -->
        <div class="row">
            <div class="col-lg-12">
                <div class="card mb-2">
                    <div class="card-body shadow-sm">
                        <h6 class="fw-bold">Færdigheder</h6>
                        <div class="row">
                            <div class="col-lg-12">
                                <!--Show skill names section-->
                                @if (data != null && data.Skills != null)
                                {
                                    <div class="col-lg-12">
                                        <!--display the names of the skills in a single row-->
                                        <h5>
                                            @foreach (var skillName in _SkillsOfStudent)
                                            {
                                                <span class="badge bg-dark m-1">@skillName</span>
                                            }
                                        </h5>
                                    </div>
                                }
                                else
                                {

                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

}
else
{
    <AlertBox IsVisible=true Message="Registrer dine profiloplysninger for at kontakte elever" waitForSeconds="10000" isWarning=true></AlertBox>
}

<!-- DialogModal for update view -->
<DialogModal @ref="DialogModal" OnClose="ReRenderPage"></DialogModal>
<AlertBox @ref="_alertBox" />

@code {
    [Parameter]
    public int Id { get; set; }
    public ClaimsPrincipal? _user { get; set; }
    private AuthenticationState? _authState;
    private string Message = "";
    private int senderId = 0;

    private List<StudentModel> _student = new List<StudentModel>();
    private List<string> _SkillsOfStudent = new List<string>();
    private AlertBox _alertBox = new AlertBox();
    private DialogModal? DialogModal { get; set; }
    private bool isVisible = false;

    #region Oninitialize
    protected override async Task OnInitializedAsync()
    {
        await GetStudentProfile(Id);
        await GetSkills(_student);
        await GetTheCompanyIdAsSenderId();
    }
    #endregion

    #region Getting the data with the service call from student
    public async Task GetStudentProfile(int id)
    {
        _student = await _studentService.GetStudentByIdToList(id);
    }
    #endregion

    #region Getting the skill Name to List (string)
    private async Task GetSkills(List<StudentModel> data)
    {
        foreach (var studentData in _student)
        {
            _SkillsOfStudent = await _skillService.GetSkills(studentData);
        }
    }
    #endregion

    #region Re-RenderPage function for re-renderint the profile page on change
    private void ReRenderPage()
    {
        StateHasChanged();
    }
    #endregion

    #region Navigate to website Link with opening a new window
    public async Task NavigateToNewTab(string link)
    {
        string url = "https://" + link;
        await jsRuntime.InvokeVoidAsync("open", url, "_blank");
    }
    #endregion

    #region Check for the image existing on the disk
    private bool ImageExistOnDisk(string imageName)
    {
        // path based on folders
        var imagePath = $"wwwroot/images/ProfileImages/{imageName}";
        return File.Exists(imagePath);
    }
    #endregion

    #region Get the companyId as sender id
    private async Task GetTheCompanyIdAsSenderId()
    {
        // Getting the user current authentication state.
        _authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        if (_authState != null)
        {
            _user = _authState.User;
            var company = await _companyService.ReadData(_user);

            if (company != null && company.Count > 0 && company[0].CompanyId > 0)
            {
                isVisible = true;
                senderId = company[0].CompanyId;
            }
            else
            {
                isVisible = false;
            }
        }
    }
    #endregion

}
