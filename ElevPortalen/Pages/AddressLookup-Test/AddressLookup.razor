<!--Made by Jozsef for testing purpose-->
@page "/address-lookup"

@using Models
@using Services
@using System.Text.Json
@using System.Threading

@inject DawaService dawaService

<div class="container">

    <h3>Address Lookup</h3>

    <!-- Input field with two-way data binding to searchTerm -->
    <label for="exampleDataList" class="form-label">Datalist with adresses</label>
    <input class="form-control" list="addressSuggestions" @bind="searchTerm" placeholder="Enter address" @oninput="UpdateDropdownWithDelay">
    <datalist id="addressSuggestions">
        @foreach (var item in address)
        {
            <!-- Option for each address suggestion -->
            <option value="@item.adresse.adresseringsvejnavn @item.adresse.husnr @item.adresse.etage @item.adresse.dør @item.adresse.postnr @item.adresse.postnrnavn">
                <!-- Display street name and house number for each address suggestion -->
                @item.adresse.adresseringsvejnavn @item.adresse.husnr @item.adresse.etage @item.adresse.dør @item.adresse.postnr @item.adresse.postnrnavn
            </option>
        }
    </datalist>

</div>

@code {
    private string? searchTerm;
    private List<AddressModel> address = new List<AddressModel>();
    private string? selectedAddress;
    private bool showDropdown;
    private CancellationTokenSource? cancellationTokenSource;

    #region Method to update address suggestions with a delay
    private async Task UpdateDropdownWithDelay(ChangeEventArgs args)
    {
        searchTerm = args.Value?.ToString();

        <!-- Cancel the previous delay if any -->
        cancellationTokenSource?.Cancel();

        <!-- Create a new cancellation token for the delay -->
        cancellationTokenSource = new CancellationTokenSource();

        try
        {
            <!-- Delay for 300 milliseconds before fetching suggestions -->
            await Task.Delay(300, cancellationTokenSource.Token);
        }
        catch (TaskCanceledException)
        {
            <!-- Delay was canceled due to a new input change -->
            return;
        }

        <!-- Fetch and update address suggestions based on the searchTerm -->
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            searchTerm = char.ToUpper(searchTerm[0]) + searchTerm.Substring(1);
            var updatedAddress = await dawaService.GetAddress(searchTerm);
            address = updatedAddress ?? new List<AddressModel>();
            showDropdown = true;
            <!-- Set showDropdown to true to display the datalist -->
        }
        else
        {
            <!-- Clear suggestions if searchTerm is empty -->
            address = new List<AddressModel>();
            showDropdown = false;
        }

        <!-- Trigger a re-render to update the UI -->
        StateHasChanged();
    }
    #endregion
}

