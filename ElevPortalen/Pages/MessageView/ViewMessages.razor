<!-- Lavet af Jozsef -->
@page "/viewmessages/{ReceiverId:int}"

@using ElevPortalen.Pages.AlertBox
@using ElevPortalen.Pages.DialogModal
@using ElevPortalen.Services;
@using ElevPortalen.Models;

@inject MessageService _messageService

<PageTitle>Messages</PageTitle>

<div class="container">
    @if (_listOfMessages.Any())
    {
        <div class="card shadow-sm">
            <div class="card-header text-center bg-dark text-white">
                @if (!MessageOpen)
                {
                    <h4 class="m-0">Beskeder</h4>
                }
                else
                {
                    <h4 class="m-0">Besked fra: @messageFrom</h4>
                }
            </div>

            <div class="card-body">
                @if (!MessageOpen)
                {
                    <table class="table table-hover border">
                        <tbody>
                            @foreach (var message in _listOfMessages)
                            {
                                <tr style="cursor:pointer;" @onclick="() => ToggleOpenMessage(message)">
                                    @if (!message.IsRead)
                                    {
                                        // if the message is not marked as readed mark it bold and closed envelope icon
                                        <td style="max-width:10px;"><i class="fa-solid fa-envelope fa-xl"></i></td>
                                        <td class="align-middle fw-bold" style="max-width:100px;">Fra: @message.SenderName</td>
                                        <td class="align-middle text-center fw-bold">
                                            <small>
                                                @if (!string.IsNullOrEmpty(message.Subject))
                                                {
                                                    @if (message.Subject.Length > 35)
                                                    {
                                                        @message.Subject.Substring(0, 25) <span>...</span>
                                                    }
                                                    else
                                                    {
                                                        @message.Subject <span>...</span>
                                                    }
                                                }
                                            </small>
                                            </td>
                                        <td class="align-middle text-end fw-bold" style="max-width:100px;">Modtaget: @message.Timestamp.ToShortDateString()</td>
                                    }
                                    else
                                    {
                                        //if the message marked as readed and mark it with opened envelope icon
                                        <td style="max-width:10px;"><i class="fa-solid fa-envelope-open fa-xl"></i></td>
                                        <td class="align-middle" style="max-width:100px;">Fra: @message.SenderName</td>
                                        <td class="align-middle text-center">
                                            <small>
                                                @if (!string.IsNullOrEmpty(message.Subject))
                                                {
                                                    @if (message.Subject.Length > 35)
                                                    {
                                                        @message.Subject.Substring(0, 25) <span>...</span>
                                                    }
                                                    else
                                                    {
                                                        @message.Subject <span>...</span>
                                                    }
                                                }
                                            </small>
                                        </td>
                                        <td class="align-middle text-end" style="max-width:100px;">Modtaget: @message.Timestamp.ToShortDateString()</td>
                                    }
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    // else the card body is the message content
                    <p class="m-3">@_Message.Content</p>
                }
            </div>

            @if (MessageOpen)
            {
                <div class="card-footer d-flex">
                    <button class="btn btn-sm btn-success me-2" @onclick="ToggleBack"><i class="fa-solid fa-circle-left me-1"></i>Tilbage</button>
                    <button class="btn btn-sm btn-success me-2" @onclick="() =>
                        DialogModal.OpenAnswareDialog(_Message.SendererId, _Message.ReceiverId, _Message.SenderName, null, _Message.Subject, null)">
                        <i class="fa-solid fa-message me-1"></i>Besvar
                    </button>
                    <button class="btn btn-sm btn-outline-danger me-2" @onclick="() => DeleteMessage(_Message.MessageId)"><i class="fa-solid fa-trash-can me-1"></i>Delete</button>        
                </div>
            }
        </div>
    }
    else
    {
        <AlertBox IsVisible=true Message="Du har ingen beskeder." waitForSeconds="0" isWarning=true></AlertBox>
    }

</div>

<!-- DialogModal for update view -->
<DialogModal @ref="DialogModal" OnClose="ReRenderPage"></DialogModal>
<!-- AlertBox -->
<AlertBox @ref="_alertBox" />

@code {
    [Parameter] public int ReceiverId { get; set; }
    private MessageModel _Message = new MessageModel();
    private List<MessageModel> _listOfMessages = new List<MessageModel>();
    private AlertBox _alertBox = new AlertBox();
    private DialogModal DialogModal = new DialogModal();
    private bool MessageOpen = false;
    private string? messageFrom = "";

    #region OnInitialized
    protected override async Task OnInitializedAsync()
    {
        await GetMyMessages();
    }
    #endregion

    #region Getting the messages with th ReceiverId
    public async Task GetMyMessages()
    {
        _listOfMessages = await _messageService.GetMessageWithReceiverId(ReceiverId);
    }
    #endregion

    #region ToggleMessage and set it to readed stand
    private async void ToggleOpenMessage(MessageModel message)
    {
        MessageOpen = true;
        _Message = message;
        messageFrom = message.SenderName;
        await _messageService.MarkMessageAsRead(message.MessageId);
    }
    #endregion

    #region Toggle back button
    private async void ToggleBack()
    {
        MessageOpen = false;
        await OnInitializedAsync();
        StateHasChanged();
    }
    #endregion

    #region Delete function for message
    private async Task DeleteMessage(int messageId)
    {
        var (success, message) = await _messageService.Delete(messageId);
        if (success)
        {
            _alertBox.SetMessage(success, message, 2000, success:true);
            ToggleBack();

        }
        else
        {
            _alertBox.SetMessage(true, message, 10000, danger:true);
        }
    }
    #endregion

    #region Re-RenderPage function for re-renderint the profile page on change
    private async void ReRenderPage()
    {
        await GetMyMessages();
        StateHasChanged();
    }
    #endregion

}
