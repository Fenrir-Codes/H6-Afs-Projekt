<!-- Lavet af Jozsef -->
@page "/profile"

@using ElevPortalen.Pages.AlertBox
@using ElevPortalen.Pages.DialogModal
@using ElevPortalen.Pages.ProfilePage.CompanyProfile
@using ElevPortalen.Pages.ProfilePage.StudentProfile
@using ElevPortalen.Services;
@using ElevPortalen.Data;
@using ElevPortalen.Models;
@using System.Security.Claims

@inject StudentService _studentService
@inject CompanyService _companyService
@inject SkillService _skillService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavManager
@inject IJSRuntime jsRuntime

<div class="container">
    <!--Autorizeview for Student and Company -->
    <AuthorizeView Roles="Student,Company,Admin">
        <Authorized>

            @if (context.User.IsInRole(Student))
            {
                <StudentProfile _user="_user"></StudentProfile>
            }
            else if (context.User.IsInRole(Company))
            {
                <CompanyProfile _user="_user"></CompanyProfile>
            }
            else
            {
                <AlertBox IsVisible=true Message="Component could not be rendered for some reason. Check ProfilePage component." isWarning=true waitForSeconds="0"></AlertBox>
            }

        </Authorized>

        <!-- Not authorized view -->
        <NotAuthorized>
            <AlertBox IsVisible=true Message="Please log in first." isDanger=true waitForSeconds="0"></AlertBox>
        </NotAuthorized>

    </AuthorizeView>

    <AlertBox @ref="_aletBox" />

</div>


@code {

    #region private fields within the scope of the class
    private AuthenticationState? _authState;
    private ClaimsPrincipal? _user;
    private AlertBox? _aletBox = new AlertBox();

    private bool isAuthenticated = false;

    private readonly string Company = "Company";
    private readonly string Student = "Student";
    private string? Message = "";

    #endregion

    #region OnInitialize
    protected override async Task OnInitializedAsync()
    {
        // Getting the user current authentication state.
        _authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        if (_authState != null)
        {
            if (_authState.User.Identity?.IsAuthenticated == true && _authState != null && _authState.User != null)
            {
                _user = _authState.User;
                // If authenticated set the bool to true zhan read the users data from the data table with the help of ReadData function
                isAuthenticated = true;
            }
            else
            {
                isAuthenticated = false;
            }
        }
    }
    #endregion

}
