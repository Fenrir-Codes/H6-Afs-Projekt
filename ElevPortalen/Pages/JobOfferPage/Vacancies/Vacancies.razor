<!-- Lavet af Jozsef -->
@page "/vacancies"

@using ElevPortalen.Models
@using ElevPortalen.Pages.AlertBox
@using ElevPortalen.Services;

@inject JobService _jobService
@inject IJSRuntime jsRuntime
@inject NavigationManager _navManager

<div class="container-fluid">
    <div class="row d-flex justify-content-center">
        @if (!isLoaded)
        {
            <!-- Placeholder skeleton for card -->
            @for (int i = 0; i < 5; i++)
            {
                <div class="card m-2 p-0 mt-3 shadow-sm">
                    <div class="card-skeleton-body">
                        <div class="skeleton-title"></div>
                        <div class="skeleton-address"></div>
                        <div class="skeleton-details"></div>
                    </div>
                    <div class="card-skeleton-footer d-flex">
                        <div class="skeleton-line"></div>
                        <div class="skeleton-line"></div>
                        <div class="skeleton-line"></div>
                    </div>
                </div>
            }
        }
        else if (!_jobList.Any())
        {
            _alertBox.SetMessage(true, "Der er endnu ikke oprettet jobtilbud", 0, warning: true);
        }
        else
        {
            <!-- Actual cards -->
            @foreach (var job in _jobList)
            {
                <div class="card bg-dark bg-gradient text-white m-2 p-0 mt-3">
                    <div class="row g-0">
                        <div class="col-md-12">
                            <div class="card-body">
                                <h4 class="card-title"><span class="badge bg-success">@job.Title</span></h4>
                                <div class="position-details">
                                    <h5 class="card-link pt-2" @onclick="() => NavigateToViewJobDetails(job.JobOfferId)">Elev specialiseret i @job.Speciality</h5>
                                    <p class="card-text">@job.JobAddress</p>
                                    <p class="card-link card-text badge bg-success" @onclick="() => NavigateToNewTab(job.JobLink)">@job.CompanyName</p>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="card-footer d-flex justify-content-center align-items-center bg-gradient">
                        <div class="specialization badge bg-dark text-warning m-1">@job.Speciality</div>
                        <div class="NumOfPositions badge bg-dark text-warning m-1">Antal ledige plads : @job.NumberOfPositionsAvailable</div>
                        <div class="specialization badge bg-dark text-warning m-1">Ansøgningsfrist : @job.Deadline.ToShortDateString()</div>
                    </div>

                </div>
            }
        }
    </div>
</div>

<AlertBox @ref="_alertBox"/>

@code {
    private List<JobOfferModel> _jobList = new List<JobOfferModel>();
    private AlertBox _alertBox = new AlertBox();
    private bool isLoaded = false;

    protected override async Task OnInitializedAsync()
    {
        await GetAllJobOffers();
    }

    #region get all joboffers to list
    private async Task GetAllJobOffers()
    {
        var (list, message, success) = await _jobService.GetAllOffers();
        isLoaded = success;
        if (success)
        {
            _jobList = list;
        }
        else
        {
            _alertBox.SetMessage(true, message, 0, warning:true);
        }
    }
    #endregion

    #region Navigate to company website Link with opening new window
    public async Task NavigateToNewTab(string? link)
    {
        string url = "https://" + link;
        await jsRuntime.InvokeVoidAsync("open", url, "_blank");
    }
    #endregion

    #region navigate to job details page
    private void NavigateToViewJobDetails(int id)
    {
        _navManager.NavigateTo($"/viewjobdetails/{id}");
    }
    #endregion

}
